#ifndef QUEENS_SOLVER_H
#define QUEENS_SOLVER_H

#include <queens_board.h>

#define QUEENS_SOLVER_STRATEGIES(X) \
    X(QUEENS_SOLVER_STRATEGY_INVALID_QUEEN, 0u) \
    X(QUEENS_SOLVER_STRATEGY_INVALID_ELIMINATION, 1u) \
    X(QUEENS_SOLVER_STRATEGY_ELIMINATE_QUEEN_SURROUNDING, 2u) \
    X(QUEENS_SOLVER_STRATEGY_ELIMINATE_LEFTOVER_COLORS, 3u) \
    X(QUEENS_SOLVER_STRATEGY_LAST_FREE_ROW_OR_COLUMN, 4u) \
    X(QUEENS_SOLVER_STRATEGY_LAST_AVAILABLE_COLOR_SHALL_BE_QUEEN, 5u) \
    X(QUEENS_SOLVER_STRATEGY_GROUP_ONLY_IN_SINGLE_ROW_OR_COLUMN, 6u) \
    X(QUEENS_SOLVER_STRATEGY_SINGLE_COLOR_IN_ROW_OR_COLUMN, 7u) \
    X(QUEENS_SOLVER_STRATEGY_QUEEN_PLACEMENT_ELIMINATES_ALL_THE_COLORS_LEFT, 8u) \
    X(QUEENS_SOLVER_STRATEGY_QUEEN_PLACEMENT_ELIMINATES_ENTIRE_ROW_OR_COLUMN, 9u) \
    X(QUEENS_SOLVER_STRATEGY_N_COLOR_GROUPS_OCCUPYING_N_ROWS_OR_COLUMNS, 10u) \
    X(QUEENS_SOLVER_STRATEGY_QUEEN_PLACEMENT_LEADS_TO_INVALID_FORCING_SEQUENCE, 11u) \
    X(QUEENS_SOLVER_STRATEGY_LAST, 12u) \
    X(QUEENS_SOLVER_SOLVED, 0xFEu) \
    X(QUEENS_SOLVER_FAILED, 0xFFu)
typedef enum : uint8
{
    QUEENS_SOLVER_STRATEGY_FIRST = 0u,
    #define XMACRO_GENERATE_ENUM(name, value) name = value,
    QUEENS_SOLVER_STRATEGIES(XMACRO_GENERATE_ENUM)
} QueensSolver_Strategy_t;

QueensSolver_Strategy_t QueensSolver_IncrementalSolve(QueensBoard_Board_t* board);
bool QueensSolver_IsBoardSolved(QueensBoard_Board_t* board);
const char* QueensSolver_GetStrategyName(QueensSolver_Strategy_t strategy);

#endif /* QUEENS_SOLVER_H */
